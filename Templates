import dash
from dash.dependencies import Input, Output
import dash_table
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import plotly.graph_objects as go

app = dash.Dash(__name__)

# Sample DataFrames as placeholders
table_top_banks = pd.DataFrame()
table_top_customers = pd.DataFrame()

app.layout = html.Div([
    dcc.Dropdown(
        id='transaction_date',
        placeholder="Select a Transaction Date",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='direction',
        placeholder="Select Direction",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='segment',
        placeholder="Select a Segment",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='market',
        placeholder="Select a Market",
        # options should be filled with the actual options
    ),
    dash_table.DataTable(
        id='table_top_banks',
        columns=[{"name": i, "id": i} for i in table_top_banks.columns],
        style_cell={'textAlign': 'left'},
        style_data_conditional=[
            {
                'if': {'column_id': 'bank_name'},
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ]
    ),
    dash_table.DataTable(
        id='table_top_customers',
        columns=[{"name": i, "id": i} for i in table_top_customers.columns],
        style_cell={'textAlign': 'left'}
    )
])

@app.callback(
    Output('table_top_banks', 'data'),
    [Input('transaction_date', 'value'),
     Input('direction', 'value'),
     Input('segment', 'value'),
     Input('market', 'value')]
)
def update_top_banks(transaction_date, direction, segment, market):
    # Placeholder for database query
    # Replace with a real query and database connection
    df_banks = pd.read_sql_query("""
        SELECT bank_name, inflow_trx, inflow_amt, inflow_pct, outflow_trx, outflow_amt, outflow_pct
        FROM your_table
        WHERE transaction_date = ? AND direction = ? AND segment = ? AND market = ?
        ORDER BY inflow_trx DESC
        LIMIT 20
    """, params=(transaction_date, direction, segment, market))

    return df_banks.to_dict('records')

@app.callback(
    Output('table_top_customers', 'data'),
    [Input('table_top_banks', 'active_cell'),
     Input('transaction_date', 'value'),
     Input('direction', 'value'),
     Input('segment', 'value'),
     Input('market', 'value')]
)
def update_top_customers(active_cell, transaction_date, direction, segment, market):
    if active_cell:
        bank_name = table_top_banks.iloc[active_cell['row']]['bank_name']
        # Placeholder for database query
        # Replace with a real query and database connection
        df_customers = pd.read_sql_query("""
            SELECT customer_name, transaction_trx, transaction_amt
            FROM your_table
            WHERE transaction_date = ? AND direction = ? AND segment = ? AND market = ? AND bank_name = ?
            ORDER BY transaction_trx DESC
            LIMIT 20
        """, params=(transaction_date, direction, segment, market, bank_name))

        return df_customers.to_dict('records')

    return []

if __name__ == '__main__':
    app.run_server(debug=True)
