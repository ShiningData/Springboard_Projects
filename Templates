import pandas as pd
from itertools import combinations
from collections import Counter, defaultdict

# Simulated data
data = {
    'ACCID': [1, 1, 2, 2, 1, 3, 3, 3, 3],
    'TIMEKEY': ['2021-01-01', '2021-01-01', '2021-01-02', '2021-01-02', '2021-01-01', '2021-01-01', '2021-01-01', '2021-01-01', '2021-01-01'],
    'TRANCODE': ['T01', 'T02', 'T03', 'T04', 'T02', 'T05', 'T05', 'T06', 'T07']
}

df = pd.DataFrame(data)

# Group by 'ACCID' and 'TIMEKEY', then aggregate 'TRANCODE' into lists
df_grouped = df.groupby(['ACCID', 'TIMEKEY'])['TRANCODE'].agg(set).reset_index()

# Function to count all combinations of 2, 3, and 4 elements
def count_combinations(trans_list):
    results = Counter()
    for length in range(2, 5):  # Length 2 (pairs), 3 (triples), and 4 (quadruples)
        for combo in combinations(trans_list, length):
            results[combo] += 1
    return results

# Aggregate combination counts across all groups
all_combinations = Counter()
df_grouped['TRANCODE'].apply(lambda x: all_combinations.update(count_combinations(x)))

# Convert the counter to a DataFrame for easier analysis and display
combination_df = pd.DataFrame(list(all_combinations.items()), columns=['Combination', 'Frequency'])

# Filter out combinations that occur only once across all groups
combination_df = combination_df[combination_df['Frequency'] > 1]

# Display the DataFrame with combination counts
print(combination_df)
