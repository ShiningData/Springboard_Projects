import pandas as pd

# Sample DataFrame (Replace this with your actual DataFrame)
data = {
    'cust_pwr_id': [1, 2, 3, 4],
    '2022-09': [150, 120, 200, 90],
    '2022-10': [160, 130, 210, 110],
    '2022-11': [170, 140, 220, 120],
    # Add columns for other months up to 2023-09
}

df = pd.DataFrame(data)

# List of columns representing months from 2022-09 to 2023-09
month_columns = df.columns[1:]

# Function to determine if all values in a row are above 100
def is_all_above_100(row):
    return all(row[month] >= 100 for month in month_columns)

# Create the 'persistent_cust' column based on the condition
df['persistent_cust'] = df.apply(is_all_above_100, axis=1)

# Map True/False values to 'Y'/'N'
df['persistent_cust'] = df['persistent_cust'].map({True: 'Y', False: 'N'})

# Print the resulting DataFrame
print(df)
rows
date_df = date_df.explode('cust_id')

# Merge the date DataFrame with the original DataFrame to fill in missing values as 0
merged_df = pd.merge(df, date_df, on=['cust_id', 'year_month'], how='right')
merged_df['trx_num'] = merged_df['trx_num'].fillna(0)

# Find the maximum and minimum trx_num for each customer
result = merged_df.groupby('cust_id')['trx_num'].agg(max_trx_num='max', min_trx_num='min')

# Calculate the difference between max_trx_num and min_trx_num, filling NaN with 0
result['trx_num_difference'] = result['max_trx_num'] - result['min_trx_num']
result['trx_num_difference'] = result['trx_num_difference'].fillna(0).astype(int)

# Reset the index
result = result.reset_index()

print(result)
