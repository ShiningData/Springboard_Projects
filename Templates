def validate_model_prediction(model_prediction, total_count, NameMtch, FNameMtch, LNameMtch, BusNameMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch, SSNMtch, DOBMtch, OverallMtchScore):
    
    def is_match_n_or_c(*features):
        """Return True if any feature is 'N' or 'C'."""
        return any(feature in ['N', 'C'] for feature in features)

    def is_all_valid(*features):
        """Return True if all features are not 'N' or 'C'."""
        return all(feature not in ['N', 'C'] for feature in features)

    def handle_total_count_zero():
        """Handle the case when total_count is 0."""
        return 'CRC1100'

    def handle_crc1100_with_count_1():
        """Handle specific cases for CRC1100 when total_count is 1."""
        if is_match_n_or_c(NameMtch, BusNameMtch) and is_all_valid(SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3100'
        elif is_match_n_or_c(SSNMtch) and is_all_valid(NameMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3200'
        elif is_match_n_or_c(DOBMtch) and is_all_valid(NameMtch, SSNMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3300'
        elif is_match_n_or_c(AddressMtch, CityMtch, StateMtch, ZipMtch) and is_all_valid(NameMtch, SSNMtch, DOBMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC2100'
        elif is_match_n_or_c(HmPhoneMtch, WkPhoneMtch) and is_all_valid(NameMtch, SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch):
            return 'CRC2200'
        return 'CRC1100'

    def handle_crc1100_with_count_greater_than_1():
        """Handle cases for CRC1100 when total_count is greater than 1."""
        if is_match_n_or_c(NameMtch, BusNameMtch, SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC4100'
        elif is_match_n_or_c(SSNMtch) and is_match_n_or_c(NameMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC4100'
        elif sum([DOBMtch in ['N', 'C'], is_match_n_or_c(AddressMtch, CityMtch, StateMtch, ZipMtch), is_match_n_or_c(HmPhoneMtch, WkPhoneMtch)]) >= 2:
            return 'CRC3400'
        return 'CRC1100'

    def handle_other_predictions_with_count_1():
        """Handle cases for CRC3400 or CRC4100 when total_count is 1."""
        return handle_crc1100_with_count_1()

    def handle_other_predictions_with_count_greater_than_1():
        """Handle cases for CRC3400 or CRC4100 when total_count is greater than 1."""
        return handle_crc1100_with_count_greater_than_1()

    # Main logic to process predictions
    if model_prediction == "CRC1100":
        if total_count == 0:
            return handle_total_count_zero()
        elif total_count == 1:
            return handle_crc1100_with_count_1()
        elif total_count > 1:
            return handle_crc1100_with_count_greater_than_1()

    elif model_prediction in ["CRC3400", "CRC4100"]:
        if total_count == 1:
            return handle_other_predictions_with_count_1()
        elif total_count > 1:
            return handle_other_predictions_with_count_greater_than_1()

    # Default fallback if no conditions match
    return model_prediction
