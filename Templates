import dash
from dash.dependencies import Input, Output
import dash_table
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import data_module  # Assuming data_module is the python module that provides the data

app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='transaction_date',
        placeholder="Select a Transaction Date",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='direction',
        placeholder="Select Direction",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='segment',
        placeholder="Select a Segment",
        # options should be filled with the actual options
    ),
    dcc.Dropdown(
        id='market',
        placeholder="Select a Market",
        # options should be filled with the actual options
    ),
    dash_table.DataTable(
        id='table_top_banks',
        columns=[],
        style_cell={'textAlign': 'left'},
        style_data_conditional=[
            {
                'if': {'column_id': 'bank_name'},
                'textDecoration': 'underline',
                'cursor': 'pointer'
            }
        ]
    ),
    dash_table.DataTable(
        id='table_top_customers',
        columns=[],
        style_cell={'textAlign': 'left'}
    )
])

@app.callback(
    Output('table_top_banks', 'data'),
    Output('table_top_banks', 'columns'),
    [Input('transaction_date', 'value'),
     Input('direction', 'value'),
     Input('segment', 'value'),
     Input('market', 'value')]
)
def update_top_banks(transaction_date, direction, segment, market):
    df_banks = data_module.get_top_banks_data(transaction_date, direction, segment, market)
    columns = [{"name": i, "id": i} for i in df_banks.columns]

    return df_banks.to_dict('records'), columns

@app.callback(
    Output('table_top_customers', 'data'),
    Output('table_top_customers', 'columns'),
    [Input('table_top_banks', 'active_cell'),
     Input('transaction_date', 'value'),
     Input('direction', 'value'),
     Input('segment', 'value'),
     Input('market', 'value')]
)
def update_top_customers(active_cell, transaction_date, direction, segment, market):
    if active_cell:
        bank_name = data_module.table_top_banks.iloc[active_cell['row']]['bank_name']
        df_customers = data_module.get_top_customers_data(bank_name, transaction_date, direction, segment, market)
        columns = [{"name": i, "id": i} for i in df_customers.columns]

        return df_customers.to_dict('records'), columns

    return [], []

if __name__ == '__main__':
    app.run_server(debug=True)
