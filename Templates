import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Page Configuration
st.set_page_config(page_title='Bank Account Authentication Rules Monitoring Dashboard', layout='wide')

# File Uploads
uploaded_current_file = st.sidebar.file_uploader("Upload Current File", type="csv")
uploaded_reference_file = st.sidebar.file_uploader("Upload Reference File", type="csv")

# Sidebar Filters
st.sidebar.subheader("Customer Result Codes")
filter_options = ["CRC1100", "CRC2100", "CRC2200", "CRC2300", "CRC2900", "CRC3100", "CRC3200", "CRC3300", "CRC3900", "CRC4900", "CRC4100", "Unlabeled Request"]
selected_crc_filter = st.sidebar.selectbox("Select CRC Filter", filter_options)

st.sidebar.subheader("Drift Analysis")
drift_options = ["Data Drift", "Target Drift"]
selected_drift_filter = st.sidebar.selectbox("Select DRIFT Filter", drift_options)

# Rules File Path
rules_file_path = "backend/bank_account_authentication_rules.csv"

# Load the Rules Table
def load_rules_table():
    return pd.read_csv(rules_file_path)

# Replace uploaded files
if uploaded_current_file:
    current_df = pd.read_csv(uploaded_current_file)
if uploaded_reference_file:
    reference_df = pd.read_csv(uploaded_reference_file)

# Navigation Pages
def main_page():
    st.title("Methodology and Business Rules for Bank Account Authentication")
    rules_df = load_rules_table()
    st.table(rules_df)

def customer_result_codes_page():
    st.title("Customer Result Code (CRC) Distribution")

    if uploaded_current_file is not None:
        # Bar Plot for Target Variable Distribution
        result_code_counts = current_df["customerResultcode"].value_counts()
        plt.figure(figsize=(10, 6))
        plt.bar(result_code_counts.index, result_code_counts.values)
        plt.xlabel("Customer Result Code")
        plt.ylabel("Count")
        plt.title("Customer Result Code (CRC) Distribution Plot")
        st.pyplot(plt)

        # Distribution Table
        result_code_percentile = (result_code_counts / result_code_counts.sum()) * 100
        distribution_table = pd.DataFrame({
            "Customer Result Code": result_code_counts.index,
            "Count": result_code_counts.values,
            "Percentile (%)": result_code_percentile.values
        })
        st.write("Customer Result Code (CRC) Distribution Table")
        st.table(distribution_table)
    else:
        st.write("Please upload the current file to display the distribution plot and table.")

def filter_customer_codes_page():
    st.title("Customer Result Code Analysis")

    if uploaded_current_file is None:
        st.write("Please upload the current file to proceed.")
        return

    # Load necessary dataframes
    rules_df = load_rules_table()
    filtered_rules_df = rules_df[rules_df["CRC"] == selected_crc_filter]
    filtered_current_df = current_df[current_df["customerResultcode"] == selected_crc_filter]

    # Business Rule Table for Selected CRC
    st.write(f"Business Rule for {selected_crc_filter} Customer Result Code")
    st.table(filtered_rules_df)

    # CRC Rule Status Table
    total_count = len(filtered_current_df)
    success_count = len(filtered_current_df[filtered_current_df["rule_status"] == "Success"])  # Assume "rule_status" column exists
    fail_count = total_count - success_count

    status_data = {
        "Status": ["Total", "Success", "Fail"],
        "Count": [total_count, success_count, fail_count]
    }
    st.write(f"{selected_crc_filter} Rule Status")
    st.table(pd.DataFrame(status_data))

    # Categorical Features' Value Distribution Table
    categorical_cols = ["NameMtch", "BusNameMtch", "AddressMtch", "CityMtch", "StateMtch", "ZipMtch", "HmPhoneMtch", "WkPhoneMtch", "SSNMtch", "DOBMtch", "IDTypeMtch", "IDNoMtch", "IDStateMtch"]
    categorical_distribution = filtered_current_df[categorical_cols].apply(lambda x: x.value_counts()).fillna(0)
    st.write(f"Categorical Features' Value Distribution at {selected_crc_filter}")
    st.table(categorical_distribution)

    # Overall Match Score Value Distribution Table
    overall_bins = pd.cut(filtered_current_df["OverallMtchScore"], bins=[0, 30, 31, 90, 91, 100], labels=["<=30", "<=90 and >=31", ">=81 and <=90", ">=91"])
    overall_distribution = overall_bins.value_counts().reindex([">=91", ">=81 and <=90", "<=90 and >=31", "<=30"], fill_value=0)
    st.write(f"Overall Match Score Value Distribution at {selected_crc_filter}")
    st.table(pd.DataFrame(overall_distribution).rename(columns={"OverallMtchScore": "Count"}))

    # Inconsistent Requests Table
    inconsistent_requests = filtered_current_df[filtered_current_df["rule_status"] != "Success"]
    if len(inconsistent_requests) > 0:
        st.write("Inconsistent Requests")
        st.table(inconsistent_requests)
    else:
        st.write(f"All Bank Account Authentication Requests are Labeled Based on the Defined Rules. There is no Inconsistent Labeled Request.")

def drift_analysis_page():
    st.title("Drift Analysis")

    if uploaded_current_file is None or uploaded_reference_file is None:
        st.write("Please upload both current and reference files to conduct drift analysis.")
        return

    # Placeholder for Drift Analysis
    if selected_drift_filter == "Data Drift":
        st.write("Data Drift Analysis in progress...")
    elif selected_drift_filter == "Target Drift":
        st.write("Target Drift Analysis in progress...")

# Page Routing
pages = {
    "Business Rules": main_page,
    "Customer Result Code Distribution": customer_result_codes_page,
    "Error Analysis": filter_customer_codes_page,
    "Drift Analysis": drift_analysis_page
}

selected_page = st.radio("", list(pages.keys()), index=0, horizontal=True)
pages[selected_page]()
