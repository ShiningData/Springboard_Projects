import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Assuming `df` is already defined and contains your data
# Parse claimCreationDate to year-month format
df['claimCreationDate'] = pd.to_datetime(df['claimCreationDate'])
df['year_month'] = df['claimCreationDate'].dt.to_period('M')

# Aggregate FE_DenialStatus at Claim ID Level
df['claim_FE_DenialStatus'] = df.groupby('claimUniqueId')['FE_DenialStatus'].transform(
    lambda x: 'Denied' if 'Denied' in x.values else 'Accepted'
)

# Drop duplicates to get Claim Level data
claim_df = df.drop_duplicates(subset=['claimUniqueId'])

# Set year_month as a categorical variable for ordered plotting
claim_df['year_month'] = pd.Categorical(
    claim_df['year_month'],
    categories=sorted(claim_df['year_month'].unique()),
    ordered=True
)

# Plotting
plt.figure(figsize=(14, 8))
ax = sns.countplot(x='year_month', hue='claim_FE_DenialStatus', data=claim_df, 
                   order=claim_df['year_month'].cat.categories, palette=['blue', 'orange'])

# Adjust y-axis limits to create space for text
ax.set_ylim(0, ax.get_ylim()[1] * 1.25)

# Add Denied to Accepted Ratio above the bars
for i in range(0, len(ax.patches), 2):
    accepted_bar = ax.patches[i]
    denied_bar = ax.patches[i + 1]
    
    # Calculate the midpoint between the two bars
    midpoint = (accepted_bar.get_x() + denied_bar.get_x() + denied_bar.get_width()) / 2
    
    # Determine the height for placing the text, slightly above the taller bar
    height = max(accepted_bar.get_height(), denied_bar.get_height()) * 1.05
    
    # Calculate the ratio
    ratio = (denied_bar.get_height() / accepted_bar.get_height()) * 100 if accepted_bar.get_height() != 0 else 0
    
    # Place the text above the bars, centered at the midpoint
    ax.text(midpoint, height, f'{ratio:.1f}%', ha='center', va='bottom', fontsize=12, color='red')

plt.title('Distribution of Denial Status for Each Year-Month')
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_with_commas))
plt.legend(title='Denial Status')
plt.tight_layout()
plt.show()
