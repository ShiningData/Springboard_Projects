import pandas as pd

# Sample DataFrame
data = {
    'cust_pwr_id': [101, 101, 102, 102, 103, 103, 104, 104],
    'cust_name': ['Customer A', 'Customer A', 'Customer B', 'Customer B', 'Customer C', 'Customer C', 'Customer D', 'Customer D'],
    'segment': ['Segment 1', 'Segment 2', 'Segment 3', 'Segment 4', 'Segment 5', 'Segment 6', 'Segment 7', 'Segment 8'],
    'naics': ['111111', '111111', '222222', '222222', '333333', '333333', '444444', '444444'],
    'tran_direction': ['In', 'Out', 'In', 'Out', 'In', 'Out', 'In', 'Out'],
    'year_dt': [2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023],
    'tran_total': [100, 50, 75, 25, 200, 300, 150, 80]
}

df = pd.DataFrame(data)

# Check for multiple segments per cust_pwr_id
segment_counts = df.groupby('cust_pwr_id')['segment'].nunique()
multiple_segments = segment_counts[segment_counts > 1].index

# Create a new DataFrame for unique cust_pwr_id
unique_df = df[df['cust_pwr_id'].isin(multiple_segments)].copy()

# Aggregate segments into a list for cust_pwr_id with multiple segments
segment_lists = unique_df.groupby('cust_pwr_id')['segment'].apply(list).reset_index()

# Merge the aggregated DataFrame with the original DataFrame
merged_df = df.merge(segment_lists, on='cust_pwr_id', suffixes=('', '_agg'), how='left')

# Fill NaN values in the new column with the original segments
merged_df['segment'] = merged_df['segment_agg'].fillna(merged_df['segment'])

# Drop the redundant column
merged_df = merged_df.drop(columns=['segment_agg'])

print(merged_df)
