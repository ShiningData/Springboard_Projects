import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from jupyter_dash import JupyterDash
from dash.dependencies import Input, Output, State
import dash_html_components as html
import dash_core_components as dcc

# Load data
wire_segment = pd.DataFrame({
    'segment': ['A', 'B', 'C', 'D', 'E'],
    'tran_direction': ['Inbound', 'Outbound', 'Outbound', 'Inbound', 'Outbound'],
    'total_tran_count': [500, 300, 200, 700, 400],
    'total_tran_amt': [100000, 50000, 30000, 120000, 80000]
})

# Define app
app = JupyterDash(__name__)

# Define direction dropdown options
directions = wire_segment['tran_direction'].unique()

# Define app layout
app.layout = html.Div(children=[
    html.H1(children='Wire Segments Table'),
    
    dcc.Dropdown(
        id='direction_dropdown',
        options=[{'label': i, 'value': i} for i in directions],
        value=directions[0]
    ),
    
    dcc.Graph(
        id='table'
    )
])

# Define make_table function
def make_table(df, direction):
    # filter data based on direction
    filtered_df = df[df['tran_direction'] == direction]
    
    # sort data based on total_tran_amt in descending order
    sorted_df = filtered_df.sort_values(['total_tran_amt'], ascending=False)
    
    # create table using plotly
    fig = go.Figure(data=[go.Table(
        header=dict(values=list(sorted_df.columns),
                    fill_color='paleturquoise',
                    align='left'),
        cells=dict(values=[sorted_df.segment, sorted_df.tran_direction,
                           sorted_df.total_tran_count, sorted_df.total_tran_amt],
                   fill_color='lavender',
                   align='left'))
    ])
    
    return fig

# Define update_table callback function
@app.callback(Output('table', 'figure'),
              [Input('direction_dropdown', 'value')])
def update_table(direction):
    fig = make_table(wire_segment, direction)
    return fig

# Run app
app.run_server(mode='inline')
