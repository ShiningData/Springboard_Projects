def determine_customer_result_code(row):
    # Unpack the columns from the input row for direct access
    NameMtch = row['NameMtch']
    BusNameMtch = row.get('BusNameMtch', 'MISSING')
    AddressMtch = row['AddressMtch']
    CityMtch = row['CityMtch']
    StateMtch = row['StateMtch']
    ZipMtch = row['ZipMtch']
    HmPhoneMtch = row['HmPhoneMtch']
    WkPhoneMtch = row['WkPhoneMtch']
    SSNMtch = row['SSNMtch']
    DOBMtch = row['DOBMtch']
    IdMtch = row['IdMtch']
    OverallMtchScore = row['OverallMtchScore']
    
    # Combine Address and Phone fields for easier mismatch counting
    address_fields = [AddressMtch, CityMtch, StateMtch, ZipMtch]
    phone_fields = [HmPhoneMtch, WkPhoneMtch]

    # Count mismatches in address, phone, SSN, DOB, and ID fields
    def count_mismatches(fields):
        return sum(1 for field in fields if field in ['N', 'C'])

    # Count mismatches in address and phone fields
    address_mismatch_count = count_mismatches(address_fields)
    phone_mismatch_count = count_mismatches(phone_fields)
    
    # Other fields considered for mismatch
    ssn_mismatch = SSNMtch in ['N', 'C']
    dob_mismatch = DOBMtch in ['N', 'C']
    id_mismatch = IdMtch in ['N', 'C']
    
    total_mismatch_count = address_mismatch_count + phone_mismatch_count + ssn_mismatch + dob_mismatch + id_mismatch

    # If NameMtch is a mismatch ('C' or 'N')
    if NameMtch in ['C', 'N']:
        # Filter based on mismatch count
        if total_mismatch_count == 0:
            if OverallMtchScore >= 81:
                return 'CRC1100'
            elif 75 <= OverallMtchScore < 81:
                return 'CRC2100'
            else:
                return 'CRC2200'
        elif total_mismatch_count == 1:
            # One mismatch category
            return 'CRC2300'
        elif total_mismatch_count == 2:
            # Two mismatch categories
            return 'CRC3200'
        elif total_mismatch_count >= 3:
            # Three or more mismatch categories
            return 'CRC3900'

    # If NameMtch is a match ('Y')
    if NameMtch == 'Y':
        # Check for no mismatches, one mismatch, or two or more mismatches
        if total_mismatch_count == 0:
            if OverallMtchScore >= 81:
                return 'CRC1100'
            elif 75 <= OverallMtchScore < 81:
                return 'CRC2100'
            else:
                return 'CRC2200'
        elif total_mismatch_count == 1:
            return 'CRC3200'
        elif total_mismatch_count >= 2:
            return 'CRC3900'

    # Fallback case for CRC4100
    if total_mismatch_count >= 2:
        return 'CRC4100'

    # Default result for uncategorized rows
    return 'CRC4100'
