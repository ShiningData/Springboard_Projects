import pandas as pd
import plotly.graph_objs as go
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Sample data
wire_segment = pd.DataFrame({
    'segment': ['A', 'B', 'C', 'D'],
    'tran_direction': ['inbound', 'outbound', 'inbound', 'outbound'],
    'total_tran_count': [20, 15, 10, 5],
    'total_tran_amt': [2000, 1500, 1000, 500]
})

# Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='tran_direction_filter',
        options=[{'label': x, 'value': x} for x in wire_segment['tran_direction'].unique()],
        value=None,
        placeholder='Filter by transaction direction'
    ),
    dcc.Graph(id='wire_segment_table')
])

@app.callback(Output('wire_segment_table', 'figure'),
              Input('tran_direction_filter', 'value'))
def update_table(tran_direction_filter):
    filtered_data = wire_segment.copy()
    if tran_direction_filter is not None:
        filtered_data = filtered_data[filtered_data['tran_direction'] == tran_direction_filter]
    filtered_data = filtered_data.sort_values(by='total_tran_amt', ascending=False)

    fig = go.Figure(
        data=[go.Table(
            header=dict(
                values=list(filtered_data.columns),
                fill_color='paleturquoise',
                align='left'
            ),
            cells=dict(
                values=[filtered_data[column] for column in filtered_data.columns],
                align='left'
            )
        )]
    )
    fig.update_layout(
        margin=dict(l=20, r=20, t=20, b=20),
        height=300
    )
    return fig


if __name__ == '__main__':
    app.run_server(mode='inline', port=8080)
