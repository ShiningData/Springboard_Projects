Here's a Python script to process the text file and extract the columns based on the given information:

```python
import pandas as pd

def parse_line(line):
    # Extract Account Number (first 10 digits)
    account_number = line[:10]
    
    # Extract Serial Number (next 10 digits)
    serial_number = line[10:20]
    
    # Extract Action (last sequence of 'I' or 'V' letters)
    action = ''.join([char for char in reversed(line) if char in ['I', 'V']])
    action = action[::-1]
    
    # The remaining part is for other columns
    remaining = line[20:-len(action)]
    
    # Extract Date (last 8 digits in the remaining part)
    date = remaining[-8:]
    
    # Extract Payee 1 (all characters before Date)
    payee_1 = remaining[:-8].strip()
    
    # Calculate Issued Amount (concatenation of Date and Serial Number)
    issued_amount = date + serial_number
    
    return {
        'Account Number': account_number,
        'Serial Number': serial_number,
        'Action': action,
        'Payee 1': payee_1,
        'Date': date,
        'Issued Amount': issued_amount
    }

# Read the text file
file_path = 'your_file.txt'  # Replace with your actual file path
with open(file_path, 'r') as file:
    lines = file.readlines()

# Parse each line
data = [parse_line(line.strip()) for line in lines]

# Create a DataFrame
df = pd.DataFrame(data)

# Display the DataFrame
print(df)

# Example: Saving to a CSV file
df.to_csv('parsed_output.csv', index=False)
```

In this script:

1. The `parse_line` function extracts the columns from each line based on the given rules.
2. The script reads the lines from the text file.
3. Each line is parsed using the `parse_line` function to extract the necessary columns.
4. A DataFrame is created from the parsed data.
5. The DataFrame is printed, and you can also save it to a CSV file if needed.

Replace `'your_file.txt'` with the actual path to your text file.
