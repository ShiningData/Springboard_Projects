import matplotlib.pyplot as plt
import pandas as pd

# Assuming the data is already in `claim_df` with 'year_month' and 'claimTotalChargeAmt'

# Filter the data for the specific month
specific_month_data = claim_df[claim_df['year_month'] == '2022-01']

# Sort the claim amounts in descending order
sorted_data = specific_month_data.sort_values(by='claimTotalChargeAmt', ascending=False)

# Calculate the cumulative claim amount and cumulative percentage of claim count
sorted_data['cumulative_amount'] = sorted_data['claimTotalChargeAmt'].cumsum()
sorted_data['cumulative_perc_count'] = 100 * (sorted_data.index + 1) / len(sorted_data)

# Plotting the Pareto chart with only the cumulative line
fig, ax1 = plt.subplots(figsize=(14, 8))

# Plot the cumulative claim amount on the left y-axis
ax1.plot(sorted_data['claimTotalChargeAmt'], sorted_data['cumulative_amount'], color='b', linewidth=2)
ax1.set_xlabel('Claim Amounts (Descending Order)')
ax1.set_ylabel('Cumulative Claim Amount', color='b')
ax1.tick_params(axis='y', labelcolor='b')
ax1.invert_xaxis()  # Invert the x-axis to have highest claim amount on the left
ax1.set_ylim(0, sorted_data['cumulative_amount'].max() * 1.1)

# Create a second y-axis for the cumulative percentage of claim count
ax2 = ax1.twinx()
ax2.plot(sorted_data['claimTotalChargeAmt'], sorted_data['cumulative_perc_count'], color='r', linewidth=2)
ax2.set_ylabel('Cumulative Percentage of Claim Count (%)', color='r')
ax2.tick_params(axis='y', labelcolor='r')
ax2.set_ylim([0, 110])  # Extend the y-axis slightly beyond 100% for better visualization

# Adding title
plt.title('Pareto Analysis - Cumulative Claim Amount and Percentage for January 2022')

# Show grid for better readability
plt.grid(True)

# Show the plot
plt.show()
