import dice_ml
from dice_ml import Dice
import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from autogluon.tabular import TabularPredictor

# Function to generate counterfactuals using DiCE for a given model
def generate_counterfactuals(model, X_train, instance, outcome_to_change, data_type, model_type):
    # Convert X_train to pandas dataframe if not already
    if not isinstance(X_train, pd.DataFrame):
        X_train = pd.DataFrame(X_train, columns=[f'Feature{i+1}' for i in range(X_train.shape[1])])

    # Initialize dice_ml Data and Model
    d = dice_ml.Data(dataframe=X_train, continuous_features=X_train.columns.tolist(), outcome_name='target')
    m = dice_ml.Model(model=model, backend="sklearn", model_type=model_type)
    
    # Create Dice explainer object
    exp = Dice(d, m)
    
    # Generate counterfactuals for the instance
    query_instance = pd.DataFrame([instance], columns=X_train.columns)
    cf = exp.generate_counterfactuals(query_instance, total_CFs=1, desired_class=outcome_to_change)
    
    # Return the generated counterfactual
    return cf.cf_examples_list[0].final_cfs_df

# Function to generate counterfactual for CatBoost model
def catboost_counterfactual(catboost_model, X_train, instance):
    return generate_counterfactuals(catboost_model, X_train, instance, outcome_to_change=0, data_type="sklearn", model_type="classifier")

# Function to generate counterfactual for AutoGluon model
def autogluon_counterfactual(autogluon_model, X_train, instance):
    # Get the best model from AutoGluon
    best_model = autogluon_model.get_model_best()
    return generate_counterfactuals(best_model, X_train, instance, outcome_to_change=0, data_type="sklearn", model_type="classifier")

# Function to generate counterfactual for Ensemble model
def ensemble_counterfactual(catboost_model, autogluon_model, X_train, instance):
    # Generate counterfactuals for both CatBoost and AutoGluon models
    catboost_cf = catboost_counterfactual(catboost_model, X_train, instance)
    autogluon_cf = autogluon_counterfactual(autogluon_model, X_train, instance)
    
    # Average the two counterfactuals (you can customize this further)
    ensemble_cf = (catboost_cf + autogluon_cf) / 2
    return ensemble_cf

# Example usage:
# Assuming you have trained CatBoost and AutoGluon models and X_train as your dataset
catboost_model = CatBoostClassifier().load_model('path_to_catboost_model')  # Load CatBoost model
autogluon_model = TabularPredictor.load('path_to_autogluon_model')  # Load AutoGluon model

# Select a sample instance for which the target is 1 (you want to change to 0)
instance = X_train.iloc[0].values  # Single instance from dataset

# Generate counterfactuals for CatBoost
catboost_cf = catboost_counterfactual(catboost_model, X_train, instance)
print("CatBoost Counterfactual:")
print(catboost_cf)

# Generate counterfactuals for AutoGluon
autogluon_cf = autogluon_counterfactual(autogluon_model, X_train, instance)
print("AutoGluon Counterfactual:")
print(autogluon_cf)

# Generate counterfactuals for Ensemble model
ensemble_cf = ensemble_counterfactual(catboost_model, autogluon_model, X_train, instance)
print("Ensemble Model Counterfactual:")
print(ensemble_cf)
