import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Parse claimCreationDate to year-month format
df['claimCreationDate'] = pd.to_datetime(df['claimCreationDate'])
df['year_month'] = df['claimCreationDate'].dt.to_period('M')

# Aggregate FE_DenialStatus at claim id level
df['claim_FE_DenialStatus'] = df.groupby('claimUniqueId')['FE_DenialStatus'].transform(
    lambda x: 'Denied' if 'Denied' in x.values else 'Accepted'
)

# Drop duplicates to get claim level data
claim_df = df.drop_duplicates(subset=['claimUniqueId'])

# Set year_month as a categorical variable for ordered plotting
claim_df['year_month'] = pd.Categorical(
    claim_df['year_month'],
    categories=sorted(claim_df['year_month'].unique()),
    ordered=True
)

# Plotting
plt.figure(figsize=(14, 8))
ax = sns.countplot(x='year_month', hue='claim_FE_DenialStatus', data=claim_df)

# Add Denied to Accepted Ratio above each month
for p in ax.patches:
    height = p.get_height()
    width = p.get_width()
    x = p.get_x()
    
    # Find the corresponding month
    year_month = p.get_x() + p.get_width() / 2
    month_data = claim_df[claim_df['year_month'] == ax.get_xticklabels()[int(x + width / 2)].get_text()]
    
    # Calculate the ratio
    denied_count = month_data[month_data['claim_FE_DenialStatus'] == 'Denied'].shape[0]
    accepted_count = month_data[month_data['claim_FE_DenialStatus'] == 'Accepted'].shape[0]
    ratio = denied_count / accepted_count if accepted_count != 0 else 0
    
    # Place the ratio text
    ax.text(p.get_x() + p.get_width() / 2, height + 500, f'{ratio:.2f}', ha="center", fontsize=10)

plt.title('Distribution of Denial Status for Each Year-Month')
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_with_commas))
plt.legend(title='Denial Status')
plt.show()
