import pandas as pd
import glob
import os

# Function to read multiple Excel files and concatenate them
def read_multiple_excel_files(file_paths):
    """
    Read multiple Excel files and concatenate them into a single DataFrame
    
    Parameters:
    file_paths (list): List of file paths to Excel files
    
    Returns:
    pandas.DataFrame: Concatenated DataFrame containing data from all files
    """
    all_dfs = []
    
    for file_path in file_paths:
        # Print progress
        print(f"Reading: {os.path.basename(file_path)}")
        
        # Read the Excel file
        df = pd.read_excel(file_path)
        
        # Optionally add a column to identify source file
        df['source_file'] = os.path.basename(file_path)
        
        # Add to our list
        all_dfs.append(df)
        
        # Print the number of rows read
        print(f"  Read {len(df)} rows")
    
    # Concatenate all DataFrames
    if all_dfs:
        combined_df = pd.concat(all_dfs, ignore_index=True)
        print(f"\nSuccessfully combined {len(all_dfs)} files into a DataFrame with {len(combined_df)} rows")
        return combined_df
    else:
        print("No data was read")
        return pd.DataFrame()

# Example 1: Specify file paths explicitly
file_paths = [
    "path/to/file1.xlsx",
    "path/to/file2.xlsx",
    "path/to/file3.xlsx",
    "path/to/file4.xlsx",
    "path/to/file5.xlsx",
    "path/to/file6.xlsx"
]

# Example 2: Use glob to find all Excel files in a directory
# directory = "path/to/excel_files/"
# file_paths = glob.glob(directory + "*.xlsx")

# Read and combine the files
combined_data = read_multiple_excel_files(file_paths)

# Display the first few rows of the combined DataFrame
combined_data.head()

# Basic information about the DataFrame
print("\nDataFrame Information:")
combined_data.info()

# Summary statistics
print("\nSummary Statistics:")
combined_data.describe()
