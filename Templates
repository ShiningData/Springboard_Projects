To resolve the issue with GEPHI not recognizing the installed Java, follow these steps:

1. **Verify Java Installation:**
   Ensure that Java is properly installed and the version is 1.8 or higher. Open a terminal or command prompt and type:
   ```sh
   java -version
   ```
   This should display the installed Java version.

2. **Set JAVA_HOME Environment Variable:**
   Set the `JAVA_HOME` environment variable to point to the directory where Java is installed.

   - **Windows:**
     1. Open the Start Menu and search for "Environment Variables."
     2. Click on "Edit the system environment variables."
     3. In the System Properties window, click on "Environment Variables."
     4. Under System Variables, click "New" and set the variable name to `JAVA_HOME` and the variable value to the path of your JDK installation (e.g., `C:\Program Files\Java\jdk1.8.0_xx`).
     5. Click OK and apply the changes.

   - **Mac/Linux:**
     1. Open a terminal.
     2. Edit your shell profile file (`~/.bashrc`, `~/.bash_profile`, `~/.zshrc`, or `~/.profile`) and add the following line:
        ```sh
        export JAVA_HOME=/path/to/your/jdk
        ```
        Replace `/path/to/your/jdk` with the actual path to your JDK installation (e.g., `/Library/Java/JavaVirtualMachines/jdk1.8.0_xx.jdk/Contents/Home` for macOS).
     3. Save the file and run `source ~/.bashrc` or the equivalent command for your shell profile file to apply the changes.

3. **Update System PATH:**
   Add the `JAVA_HOME/bin` directory to your system `PATH`.

   - **Windows:**
     1. In the Environment Variables window, under System Variables, find the `Path` variable and click "Edit."
     2. Click "New" and add the path to your JDK's `bin` directory (e.g., `C:\Program Files\Java\jdk1.8.0_xx\bin`).
     3. Click OK and apply the changes.

   - **Mac/Linux:**
     1. Open a terminal.
     2. Edit your shell profile file and add the following line:
        ```sh
        export PATH=$JAVA_HOME/bin:$PATH
        ```
     3. Save the file and run `source ~/.bashrc` or the equivalent command for your shell profile file to apply the changes.

4. **Check GEPHI Configuration:**
   Ensure that GEPHI is configured to use the correct Java installation. Sometimes, you may need to explicitly specify the Java path in GEPHI's configuration files.

   - Navigate to the GEPHI installation directory.
   - Locate the `gephi.conf` file (typically in the `etc` subdirectory).
   - Open the `gephi.conf` file in a text editor.
   - Add or modify the following line to point to your JDK installation:
     ```sh
     jdkhome="/path/to/your/jdk"
     ```
     Replace `/path/to/your/jdk` with the actual path to your JDK installation.

After completing these steps, try to launch GEPHI again. If the problem persists, consider reinstalling both Java and GEPHI, ensuring that all previous installations are completely removed before reinstalling.
================

To consolidate TRAN_CDs based on their usage volume correlation over 12 months using Dynamic Time Warping (DTW) and cosine similarity, we can follow these steps:
1. Generate the Dataframe with Time Series: Ensure each TRAN_CD for each RLTN_PWR_ID has a 12-month time series of VOLUME.
2. Calculate Cosine Similarity: Compute cosine similarity between the 12-month time series of each pair of TRAN_CDs.
3. Cluster TRAN_CDs: Use hierarchical clustering based on cosine similarity to group similar TRAN_CDs.
4. Output Recommended Consolidation Groups: Provide the consolidation groups and their similarity scores.
Steps:
1. Data Preparation: Generate or use the provided dataset and ensure each RLTN_PWR_ID and TRAN_CD has a 12-month VOLUME time series.
2. Pivot the Table: Create a pivot table where rows are RLTN_PWR_ID, columns are TRAN_CD, and cell values are lists of 12 monthly VOLUME values.
3. Flatten the Lists: Flatten the lists of 12-month volumes into a 2D array where each row represents a TRAN_CD and each column represents a month.
3. Cosine Similarity Calculation: Compute the cosine similarity between these 12-month time series.
4. Hierarchical Clustering: Perform hierarchical clustering on the similarity matrix to group similar TRAN_CDs.
5. Output Groups: Print the recommended consolidation groups with their average cosine similarity.
This approach correctly handles the flattening of the 12-month volume lists and computes the cosine similarity between the time series for clustering and consolidation.

=========================================================================================================================

Let's break down the hierarchical clustering part of the pipeline:

### Hierarchical Clustering Explanation

Hierarchical clustering is a method of cluster analysis which seeks to build a hierarchy of clusters. It's a popular method for finding natural groupings in data based on the similarity between data points. In this pipeline, we are using hierarchical clustering to group similar `TRAN_CD`s based on their cosine similarity over 12 months.

### Code Breakdown

1. Linkage Function:
    ```python
    Z = linkage(1 - cosine_sim_matrix, 'average')
    ```
    - `cosine_sim_matrix`: This is a DataFrame where each cell `(i, j)` contains the cosine similarity between the time series of `TRAN_CD_i` and `TRAN_CD_j`. The values range from 0 to 1, where 1 indicates identical time series and 0 indicates completely dissimilar time series.
    
    - `1 - cosine_sim_matrix`: We are converting the similarity matrix to a distance matrix. Since cosine similarity ranges from 0 to 1, subtracting it from 1 transforms it into a distance metric (0 indicates identical time series, and 1 indicates completely dissimilar time series).
    
    - `linkage()`: This function performs hierarchical/agglomerative clustering. It takes a distance matrix (or a condensed distance matrix) and a method to calculate the distance between clusters.
        - Input: `1 - cosine_sim_matrix` (distance matrix)
        - Method: `'average'` (also known as UPGMA - Unweighted Pair Group Method with Arithmetic Mean). This method calculates the average distance between all pairs of objects in two clusters.
        - Output: `Z` (linkage matrix)

    - `Z`: The linkage matrix which encodes the hierarchical clustering. Each row represents a merge between two clusters. The columns are:
        1. The indices of the clusters being merged.
        2. The distance between the clusters being merged.
        3. The number of original observations in the newly formed cluster.

2. Threshold for Clustering:
    ```python
    max_d = 0.1  # Threshold for clustering
    ```
    - `max_d`: This is the maximum distance threshold to apply when forming flat clusters from the hierarchical clustering tree. Clusters that are further apart than this distance will not be merged.

3. Forming Flat Clusters:
    ```python
    clusters = fcluster(Z, max_d, criterion='distance')
    ```
    - `fcluster()`: This function forms flat clusters from the hierarchical clustering defined by the linkage matrix `Z`.
        - Input: 
            - `Z`: The linkage matrix obtained from the `linkage()` function.
            - `max_d`: The threshold for forming clusters.
            - `criterion`: Defines the criterion to use for forming clusters. In this case, `'distance'` means clusters are formed so that no cluster pair has a distance greater than `max_d`.
        - Output: `clusters` (array of cluster labels)
            - `clusters`: An array where each element represents the cluster label assigned to the corresponding `TRAN_CD`. For example, if there are 61 `TRAN_CD`s, `clusters` will be an array of length 61 with each element representing the cluster ID.

### Example Walkthrough

1. Calculate Linkage Matrix (`Z`):
    - Given a distance matrix derived from `1 - cosine_sim_matrix`, `linkage()` will build a hierarchical clustering tree.
    - The linkage matrix `Z` contains information about the merges that happen at each step of the clustering process.

2. Set Distance Threshold (`max_d`):
    - `max_d = 0.1` sets the threshold for forming clusters. Any clusters with a distance greater than 0.1 will remain separate.

3. Form Flat Clusters:
    - Using `fcluster(Z, max_d, criterion='distance')`, the hierarchical tree is cut at the distance `max_d`, and clusters are formed accordingly.
    - The output `clusters` assigns a cluster label to each `TRAN_CD`.

### Practical Example

Suppose we have 5 `TRAN_CD`s with the following cosine similarities:

|        | TRAN_1 | TRAN_2 | TRAN_3 | TRAN_4 | TRAN_5 |
|--------|--------|--------|--------|--------|--------|
| TRAN_1 | 1.00   | 0.85   | 0.10   | 0.20   | 0.25   |
| TRAN_2 | 0.85   | 1.00   | 0.15   | 0.25   | 0.30   |
| TRAN_3 | 0.10   | 0.15   | 1.00   | 0.90   | 0.85   |
| TRAN_4 | 0.20   | 0.25   | 0.90   | 1.00   | 0.80   |
| TRAN_5 | 0.25   | 0.30   | 0.85   | 0.80   | 1.00   |

1. Convert to Distance Matrix:
    ```python
    1 - cosine_sim_matrix
    ```

|        | TRAN_1 | TRAN_2 | TRAN_3 | TRAN_4 | TRAN_5 |
|--------|--------|--------|--------|--------|--------|
| TRAN_1 | 0.00   | 0.15   | 0.90   | 0.80   | 0.75   |
| TRAN_2 | 0.15   | 0.00   | 0.85   | 0.75   | 0.70   |
| TRAN_3 | 0.90   | 0.85   | 0.00   | 0.10   | 0.15   |
| TRAN_4 | 0.80   | 0.75   | 0.10   | 0.00   | 0.20   |
| TRAN_5 | 0.75   | 0.70   | 0.15   | 0.20   | 0.00   |

2. Linkage Matrix:
    ```python
    Z = linkage(1 - cosine_sim_matrix, 'average')
    ```
    The linkage matrix `Z` will encode the hierarchy of the clusters.

3. Form Clusters:
    ```python
    clusters = fcluster(Z, max_d, criterion='distance')
    ```
    With `max_d = 0.1`, the function will cut the tree at this threshold and form clusters based on the distance.

The output `clusters` will contain the cluster labels for each `TRAN_CD`, indicating which `TRAN_CD`s are grouped together based on their similarity.

By following these steps and understanding each part of the code, you can apply hierarchical clustering to group similar transaction codes (`TRAN_CD`) based on their usage patterns over time.
