def validate_model_prediction(model_prediction, total_count, NameMtch, FNameMtch, LNameMtch, BusNameMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch, SSNMtch, DOBMtch, OverallMtchScore):
    
    def is_feature_n_or_c(*args):
        return any(feature in ['N', 'C'] for feature in args)

    def are_all_others_valid(*args):
        return all(feature not in ['N', 'C'] for feature in args)

    def case_crc3100():
        if (NameMtch in ['N', 'C'] or BusNameMtch == 'N') and are_all_others_valid(SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3100'
        return None

    def case_crc3200():
        if SSNMtch in ['N', 'C'] and are_all_others_valid(NameMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3200'
        return None

    def case_crc3300():
        if DOBMtch in ['N', 'C'] and are_all_others_valid(NameMtch, SSNMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC3300'
        return None

    def case_crc2100():
        if is_feature_n_or_c(AddressMtch, CityMtch, StateMtch, ZipMtch) and are_all_others_valid(NameMtch, SSNMtch, DOBMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC2100'
        return None

    def case_crc2200():
        if is_feature_n_or_c(HmPhoneMtch, WkPhoneMtch) and are_all_others_valid(NameMtch, SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch):
            return 'CRC2200'
        return None

    def case_total_count_1():
        return (case_crc3100() or case_crc3200() or case_crc3300() or case_crc2100() or case_crc2200() or model_prediction)

    def case_crc4100():
        if is_feature_n_or_c(NameMtch, BusNameMtch) and is_feature_n_or_c(SSNMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC4100'
        if SSNMtch in ['N', 'C'] and is_feature_n_or_c(NameMtch, BusNameMtch, DOBMtch, AddressMtch, CityMtch, StateMtch, ZipMtch, HmPhoneMtch, WkPhoneMtch):
            return 'CRC4100'
        return None

    def case_crc3400():
        if sum([DOBMtch in ['N', 'C'], is_feature_n_or_c(AddressMtch, CityMtch, StateMtch, ZipMtch), is_feature_n_or_c(HmPhoneMtch, WkPhoneMtch)]) >= 2:
            return 'CRC3400'
        return None

    def case_total_count_greater_than_1():
        return (case_crc4100() or case_crc3400() or model_prediction)

    # Main function logic based on model_prediction and total_count
    if model_prediction == "CRC1100":
        if total_count == 0:
            return 'CRC1100'
        elif total_count == 1:
            return case_total_count_1()
        elif total_count > 1:
            return case_total_count_greater_than_1()

    elif model_prediction == "CRC3400" or model_prediction == "CRC4100":
        if total_count == 1:
            return case_total_count_1()
        elif total_count > 1:
            return case_total_count_greater_than_1()

    # Default fallback if no condition matches
    return model_prediction
