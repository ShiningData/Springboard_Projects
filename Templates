import pandas as pd
import plotly.graph_objs as go
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

# Sample data
wire_segment = pd.DataFrame({
    'segment': ['A', 'B', 'C', 'D'],
    'tran_direction': ['inbound', 'outbound', 'inbound', 'outbound'],
    'total_tran_count': [20, 15, 10, 5],
    'total_tran_amt': [2000, 1500, 1000, 500]
})

# Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Dropdown(
        id='tran_direction_filter',
        options=[{'label': x, 'value': x} for x in ['All'] + list(wire_segment['tran_direction'].unique())],
        value='All',
        placeholder='Filter by transaction direction'
    ),
    html.Br(),
    html.Div(id='table-container')
])


@app.callback(Output('table-container', 'children'),
              Input('tran_direction_filter', 'value'))
def update_table(tran_direction_filter):
    if tran_direction_filter == 'All':
        filtered_data = wire_segment.copy()
    else:
        filtered_data = wire_segment[wire_segment['tran_direction'] == tran_direction_filter]

    filtered_data = filtered_data.sort_values(by='total_tran_amt', ascending=False)

    table = go.Figure(data=[go.Table(
        header=dict(values=list(filtered_data.columns),
                    fill_color='paleturquoise',
                    align='left'),
        cells=dict(values=[filtered_data[column] for column in filtered_data.columns],
                   align='left'))
    ])

    table.update_layout(margin=dict(l=20, r=20, t=20, b=20),
                         height=300)

    return dcc.Graph(figure=table)


if __name__ == '__main__':
    app.run_server(mode='inline')
