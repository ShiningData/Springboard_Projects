import spacy
from spacy.matcher import Matcher

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Initialize the matcher
matcher = Matcher(nlp.vocab)

# Example pattern to match addresses like "123 Main St"
pattern = [
    {"IS_DIGIT": True},  # Matches street number
    {"LOWER": {"REGEX": "^[a-z]+$"}},  # Matches street name
    {"LOWER": {"IN": ["st", "street", "ave", "avenue", "blvd", "boulevard", "road", "rd", "lane", "ln"]}}  # Matches street type
]

# Add the pattern to the matcher
matcher.add("ADDRESS_PATTERN", [pattern])

def extract_addresses(text):
    # Process the text with spaCy
    doc = nlp(text)
    
    # Find matches in the text
    matches = matcher(doc)
    
    # Extract the matched spans
    addresses = []
    for match_id, start, end in matches:
        span = doc[start:end]
        addresses.append(span.text)
    
    return addresses

# Example text with addresses
text = "I live at 123 Main St, and my office is located at 456 Elm Ave."

# Extract addresses
addresses = extract_addresses(text)

# Print the extracted addresses
print(addresses)
['123 Main St', '456 Elm Ave']


Explanation:
Pattern Matching: 
The pattern is designed to match sequences like "123 Main St". The first part looks for a digit (street number), the second part matches the street name (assuming it's a single word), and the third part matches common street types like "St", "Ave", etc.
Customization: You can extend or modify the pattern to match more complex address structures, including multi-word street names, apartment numbers, zip codes, etc.

Limitations:
Complex Addresses: This method might miss complex addresses or addresses in non-standard formats.
False Positives: The matcher might incorrectly label non-address sequences as addresses, depending on the text's structure.

Advanced Approach:
For more robust extraction, especially if addresses vary significantly in structure, consider training a custom NER model on annotated address data. This approach would involve labeling a training dataset with addresses and using spaCy's training tools to create a specialized model.

This script should help you get started with extracting addresses using spaCy in Python. Adjust the patterns according to the specific formats you expect in your data.
