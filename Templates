Conduct Sensitivity analysis on interest rate changes impact on deposit balance by using monte carlo simulation in python as stated below:

Generate random interest rate changes based on historical volatility or assumed distributions.
Simulate the impact of these random interest rate changes on deposit balances using a large number of iterations.
Analyze the distribution of deposit balance outcomes to understand the range of potential impacts.
Libraries such as NumPy and scipy can assist in generating random numbers and performing simulations.

1. **Load Data**: Load the dataset containing deposit balance and interest rate data. Make sure the dataset is in a format that can be easily read by pandas, such as a CSV file.

```python
import pandas as pd

# Load dataset (assuming you have a CSV file with deposit balance and interest rate data)
data = pd.read_csv('deposit_data.csv')
```

2. **Calculate Parameters**: Calculate the mean and standard deviation of interest rates from the historical data. These parameters will be used to generate random interest rate changes in the Monte Carlo simulation.

```python
# Calculate mean and standard deviation of interest rates
interest_rate_mean = data['Interest_Rate'].mean()
interest_rate_std = data['Interest_Rate'].std()
```

3. **Perform Monte Carlo Simulation**: Generate random interest rate changes based on a normal distribution with the calculated mean and standard deviation. For each iteration of the simulation, calculate new deposit balances based on the simulated interest rates.

```python
import numpy as np

# Define number of Monte Carlo simulations
num_simulations = 1000

# Perform Monte Carlo simulation
simulation_results = []

for _ in range(num_simulations):
    # Generate random interest rate changes from a normal distribution
    interest_rate_changes = np.random.normal(loc=interest_rate_mean, scale=interest_rate_std, size=len(data))
    # Calculate new deposit balances based on simulated interest rates
    simulated_deposit_balances = data['Deposit_Balance'] * (1 + interest_rate_changes)
    # Store simulated deposit balances for this iteration
    simulation_results.append(simulated_deposit_balances)
```

4. **Convert Results to DataFrame**: Convert the simulation results to a DataFrame for easier analysis. Each row of the DataFrame represents one iteration of the simulation, and each column represents a deposit balance at a specific point in time.

```python
# Convert simulation results to DataFrame
simulation_results_df = pd.DataFrame(simulation_results, columns=data.index)
```

5. **Analyzing Simulation Results**: Calculate summary statistics (e.g., mean, standard deviation, quantiles) of the simulated deposit balances to understand the distribution of potential outcomes.

```python
# Calculate summary statistics of simulated deposit balances
simulation_statistics = simulation_results_df.describe(percentiles=[0.05, 0.95])

# Print summary statistics
print("Summary Statistics of Simulated Deposit Balances:")
print(simulation_statistics)
```

6. **Visualize Simulation Results**: Visualize the distribution of simulated deposit balances using a histogram to gain insights into the range of potential impacts.

```python
import matplotlib.pyplot as plt

# Visualize distribution of simulated deposit balances
plt.figure(figsize=(10, 6))
plt.hist(simulation_results_df.values.flatten(), bins=30, alpha=0.5)
plt.xlabel('Simulated Deposit Balance')
plt.ylabel('Frequency')
plt.title('Distribution of Simulated Deposit Balances')
plt.show()
```

By following these steps, you can conduct a Monte Carlo simulation to assess the sensitivity of deposit balances to interest rate changes and gain insights into the potential range of outcomes.
