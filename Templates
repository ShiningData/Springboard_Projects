import re

def parse_rules(rules):
    readable_rules = []
    for rule in rules:
        # Remove unwanted symbols and normalize spacing
        rule = rule.replace('"', '').replace('IF ', '').strip()
        
        # Match intervals and format them
        intervals = re.findall(r'([a-zA-Z_]+) ?[=<>]+ ?([\(\[-]?[^\)]+[\)\]])', rule)
        formatted_conditions = []
        for feature, interval in intervals:
            # Normalize interval formatting
            interval = interval.replace('inf', '∞')  # Handle infinity for clarity
            
            # Handle different cases of intervals
            if '(-∞,' in interval:  # Less than case
                formatted_condition = f"{feature} is less than {interval.split(',')[1].strip(')')}"
            elif '(∞,' in interval:  # Greater than case
                formatted_condition = f"{feature} is greater than {interval.split(',')[0].strip('(')}"
            elif ',' in interval:  # Between case
                values = interval.strip('()[]').split(',')
                if '(' in interval or ')' in interval:  # Exclusive bounds
                    formatted_condition = f"{feature} is between {values[0].strip()} and {values[1].strip()} (exclusive)"
                else:  # Inclusive bounds
                    formatted_condition = f"{feature} is between
