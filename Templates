import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Parse claimCreationDate to year-month format
df['claimCreationDate'] = pd.to_datetime(df['claimCreationDate'])
df['year_month'] = df['claimCreationDate'].dt.to_period('M')

# Aggregate FE_DenialStatus at claim id level
df['claim_FE_DenialStatus'] = df.groupby('claimUniqueId')['FE_DenialStatus'].transform(
    lambda x: 'Denied' if 'Denied' in x.values else 'Accepted'
)

# Drop duplicates to get claim level data
claim_df = df.drop_duplicates(subset=['claimUniqueId'])

# Set year_month as a categorical variable for ordered plotting
claim_df['year_month'] = pd.Categorical(
    claim_df['year_month'],
    categories=sorted(claim_df['year_month'].unique()),
    ordered=True
)

# Plotting
plt.figure(figsize=(14, 8))
ax = sns.countplot(x='year_month', hue='claim_FE_DenialStatus', data=claim_df)

# Adjust y-axis limits to create space for text
ax.set_ylim(0, ax.get_ylim()[1] * 1.1)

# Add Denied to Accepted Ratio between the bars as percentages, in red color
for i, label in enumerate(ax.get_xticklabels()):
    month_data = claim_df[claim_df['year_month'] == label.get_text()]
    
    # Calculate the ratio
    denied_count = month_data[month_data['claim_FE_DenialStatus'] == 'Denied'].shape[0]
    accepted_count = month_data[month_data['claim_FE_DenialStatus'] == 'Accepted'].shape[0]
    ratio = (denied_count / accepted_count) * 100 if accepted_count != 0 else 0
    
    # Get the positions of the bars
    denied_bar = ax.patches[i]  # The denied bar
    accepted_bar = ax.patches[i + len(ax.get_xticklabels())]  # The accepted bar (shift by number of categories)
    
    # Calculate the middle position between the two bars
    middle_x = (denied_bar.get_x() + accepted_bar.get_x()) / 2 + denied_bar.get_width() / 2
    
    # Determine the height for placing the text
    middle_y = max(denied_bar.get_height(), accepted_bar.get_height()) + 500  # Position above the higher bar
    
    # Ensure the text doesn't go out of bounds
    max_height = ax.get_ylim()[1] * 0.95  # Set a maximum height to keep text within the frame
    middle_y = min(middle_y, max_height)
    
    # Place the ratio text as percentage, in red color
    ax.text(middle_x, middle_y, f'{ratio:.0f}%', ha="center", fontsize=10, color='red')

plt.title('Distribution of Denial Status for Each Year-Month')
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_with_commas))
plt.legend(title='Denial Status')
plt.show()
