def preprocess_all_rule(all_rule_df):
    """
    Preprocesses the input DataFrame by performing the following operations:
    1. Converts the "EFFECTIVE_DATE" column to datetime format.
       - If "EFFECTIVE_DATE" is None, assigns it a default value of "9999-09-09".
    2. Calculates the "EFFECTIVE_AGE" column as the number of days since the "EFFECTIVE_DATE".
       - If "EFFECTIVE_DATE" is None, assigns "EFFECTIVE_AGE" a default value of 9999.
    3. Converts the "EFFECTIVE_AGE" column to an integer data type.
    4. Ensures the "YEAR" column is cast to an integer data type.
       - If "YEAR" is None, assigns it a default value of 99.

    Parameters:
        all_rule_df (pd.DataFrame): Input DataFrame containing columns "EFFECTIVE_DATE" and "YEAR".

    Returns:
        pd.DataFrame: The preprocessed DataFrame with updated columns.
    """
    all_rule_df["EFFECTIVE_DATE"] = pd.to_datetime(
        all_rule_df["EFFECTIVE_DATE"], errors="coerce"
    )
    # Handle None values for EFFECTIVE_DATE
    all_rule_df["EFFECTIVE_DATE"].fillna(pd.Timestamp("9999-09-09"), inplace=True)

    current_date = pd.Timestamp.now()
    all_rule_df["EFFECTIVE_AGE"] = (
        current_date - all_rule_df["EFFECTIVE_DATE"]
    ).dt.days
    # Handle None values for EFFECTIVE_AGE
    all_rule_df.loc[all_rule_df["EFFECTIVE_DATE"] == pd.Timestamp("9999-09-09"), "EFFECTIVE_AGE"] = 9999

    all_rule_df["EFFECTIVE_AGE"] = all_rule_df["EFFECTIVE_AGE"].astype("Int64")

    # Handle None values for YEAR
    all_rule_df["YEAR"] = all_rule_df["YEAR"].fillna(99).astype("Int64")

    return all_rule_df
