# Full pie chart with percentages arranged alternately higher and lower to avoid overlaps
fig, ax = plt.subplots(figsize=(10, 8))
colors = plt.cm.tab10(range(len(outcomes)))  # Assign colors from a colormap

# Create the full pie chart
wedges, _ = ax.pie(
    counts,
    startangle=90,
    labels=None,  # No labels inside the pie chart
    colors=colors,
    autopct=None  # Disable default percentage placement
)

# Add percentages outside the pie, arranged alternately higher and lower
for i, (wedge, percentage) in enumerate(zip(wedges, percentages)):
    theta = (wedge.theta2 + wedge.theta1) / 2  # Calculate the angle
    x = np.cos(np.radians(theta))  # X-coordinate
    y = np.sin(np.radians(theta))  # Y-coordinate
    offset = 0.15 if i % 2 == 0 else -0.15  # Alternate higher and lower placement
    ax.annotate(
        f"{percentage:.1f}%", 
        xy=(x, y), 
        xytext=(1.3 * x, 1.3 * y + offset),  # Adjust placement based on offset
        ha="center",
        fontsize=10,
        arrowprops=dict(arrowstyle="-", color="black", lw=0.5)
    )

# Add a legend with color coding and outcome names
ax.legend(
    handles=[plt.Line2D([0], [0], marker='o', color='w', markerfacecolor=color, markersize=10) for color in colors],
    labels=outcomes,
    loc="center left",
    bbox_to_anchor=(1, 0.5),  # Position the legend to the right of the pie chart
    title="Outcomes",
    fontsize=10,
    title_fontsize=12
)

plt.title("Percentage Distribution of Outcomes", fontsize=14)
plt.tight_layout()
plt.show()
