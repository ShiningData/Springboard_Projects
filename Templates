import pandas as pd
import numpy as np
import lime
import lime.lime_tabular
import catboost
from autogluon.tabular import TabularPredictor
from sklearn.preprocessing import LabelEncoder

# Load your data
# Assuming you have a Pandas DataFrame called df with input features
df = pd.read_csv("your_data.csv")

# Preprocessing for categorical and numerical features
categorical_features = df.select_dtypes(include=['object', 'category']).columns
numerical_features = df.select_dtypes(include=['int64', 'float64']).columns

# Encoding categorical features
label_encoders = {}
for col in categorical_features:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Split into features and target
y = df['target']
X = df.drop('target', axis=1)

# Load trained models (replace with your model paths or instances)
catboost_model = catboost.CatBoostClassifier().load_model("catboost_model.cbm")
autogluon_model = TabularPredictor.load("autogluon_model")

# Define an ensemble prediction function
def ensemble_predict(data):
    catboost_preds = catboost_model.predict_proba(data)[:, 1]
    autogluon_preds = autogluon_model.predict_proba(data)[1]  # Assuming binary classification
    # Average the probabilities from both models
    ensemble_preds = (catboost_preds + autogluon_preds) / 2
    return ensemble_preds

# LIME interpreter setup
explainer = lime.lime_tabular.LimeTabularExplainer(
    training_data=X.values,
    feature_names=X.columns,
    class_names=['Class 0', 'Class 1'],
    mode='classification'
)

# Generate LIME explanations for multiple instances and store results in a DataFrame
explanations = []
for idx in range(len(X)):
    instance = X.iloc[idx].values.reshape(1, -1)
    prediction = ensemble_predict(instance)
    if prediction >= 0.5:
        explanation = explainer.explain_instance(
            data_row=instance[0],
            predict_fn=ensemble_predict
        )
        explanation_table = explanation.as_list()
        explanation_dict = {feature: weight for feature, weight in explanation_table}
        explanation_dict['instance_index'] = idx
        explanations.append(explanation_dict)
    else:
        explanations.append({'instance_index': idx, 'explanation': 'The claim is accepted'})

# Convert explanations to DataFrame
explanations_df = pd.DataFrame(explanations)

# Save the explanations DataFrame to a CSV file
explanations_df.to_csv('lime_explanations.csv', index=False)

# Display the explanations DataFrame
print(explanations_df.head())
