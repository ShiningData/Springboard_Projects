I understand. Let's update the script to read from a text file instead of using hardcoded input lines. This updated script will read each line from the file, identify and extract the date, and then create a pandas Series.

```python
import pandas as pd
import re
from datetime import datetime

# Function to parse the date from a string
def parse_date(date_str):
    date_formats = ['%m%d%Y', '%m/%d/%Y', '%m/%d/%y', '%m%d%y', '%Y%m%d']
    for date_format in date_formats:
        try:
            return pd.to_datetime(date_str, format=date_format)
        except ValueError:
            continue
    raise ValueError(f"Date format not recognized: {date_str}")

# Function to identify and extract date from a line
def extract_date_from_line(line):
    current_year = datetime.now().year
    date_patterns = [
        r'(\d{8})(?=\D)',  # Matches YYYYMMDD where non-digit follows
        r'(\d{1,2}/\d{1,2}/\d{4})(?=\D)',  # Matches MM/DD/YYYY where non-digit follows
        r'(\d{1,2}/\d{1,2}/\d{2})(?=\D)',  # Matches MM/DD/YY where non-digit follows
        r'(\d{1,2}\d{1,2}\d{4})(?=\D)',    # Matches MMDDYYYY where non-digit follows
        r'(\d{1,2}\d{1,2}\d{2})(?=\D)'     # Matches MMDDYY where non-digit follows
    ]
    
    for pattern in date_patterns:
        match = re.search(pattern, line)
        if match:
            date_str = match.group()
            try:
                parsed_date = parse_date(date_str)
                if parsed_date.year <= current_year:  # Ensure the date is not in the future
                    return parsed_date.strftime('%m-%d-%Y')
            except ValueError:
                continue
    raise ValueError("Date format not recognized or date not found in line")

# Function to extract dates from the text file and create a series
def extract_dates_from_file(file_path):
    dates = []
    with open(file_path, 'r') as file:
        lines = file.readlines()
        for line in lines:
            try:
                parsed_date = extract_date_from_line(line)
                dates.append(parsed_date)
            except ValueError as e:
                print(f"Error parsing date on line: {line.strip()}. Error: {e}")
    
    date_series = pd.Series(dates, name='Date')
    return date_series

# Main function to create a DataFrame with the date series
def main():
    file_path = input("Enter the path of the txt file to process: ")
    
    try:
        date_series = extract_dates_from_file(file_path)
        print(date_series.head())
        # You can add more series here and create a DataFrame
        # Example:
        # df = pd.DataFrame({
        #     'Date': date_series,
        #     'OtherColumn': other_series,
        #     ...
        # })
        # print(df.head())
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
```

### Explanation:
1. **Reading from File**:
   - The `extract_dates_from_file` function reads the lines from the specified text file.

2. **Regular Expressions**:
   - Patterns match dates based on different formats and ensure they are followed by a non-digit character.

3. **Extracting Dates from Lines**:
   - Each line is processed to identify and extract the date, ensuring it's not in the future.
   - If a date is not found or the format is not recognized, it prints an error message for that line.

4. **Creating a Pandas Series**:
   - Extracted dates are collected into a pandas Series.

5. **Main Function**:
   - The `main` function handles user input for the file path, processes the file, and prints the resulting date series.

### Example:
If the file contains the line "19283746501345734876 456.7803082019 Roland Victor  V", the script will extract the date '03082019' and format it as '03-08-2019'. The output should be:

```
0    03-08-2019
Name: Date, dtype: object
```

This updated script will now read from a text file, handle various date formats, and create a pandas Series with the extracted dates.
