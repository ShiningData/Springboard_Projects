import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from matplotlib.colors import ListedColormap

# Generate a dataset
X, y = make_classification(n_samples=1000, n_features=20, n_classes=5, random_state=42)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a simple classifier and predict
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Create a confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Create a custom color map
# deep blue for diagonal (correct predictions), white for zero, red for misclassification
cmap = ListedColormap(['white', 'red', 'deepskyblue'])

# Create a 2D array for color mapping
color_array = np.zeros_like(cm, dtype=np.float)
for i in range(cm.shape[0]):
    for j in range(cm.shape[1]):
        if i == j:
            color_array[i, j] = 2  # Diagonal (correct predictions)
        elif cm[i, j] == 0:
            color_array[i, j] = 0  # Zero mistakes
        else:
            color_array[i, j] = 1  # Misclassification

# Use Seaborn to plot heatmap
sns.heatmap(cm, annot=True, fmt="d", cmap=cmap, cbar=False, mask=color_array!=color_array, linewidths=.5)

plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()
