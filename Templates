import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Function to aggregate FE_DenialStatus at claim id level
def aggregate_denial_status(df):
    df['claim_FE_DenialStatus'] = df.groupby('claimUniqueId')['FE_DenialStatus'].transform(
        lambda x: 'Denied' if 'Denied' in x.values else 'Accepted'
    )
    return df

# Aggregate FE_DenialStatus at claim id level
df_new = aggregate_denial_status(df)

# Format numbers with commas
def format_with_commas(x, pos):
    return f'{int(x):,}'

claim_df = df_new.drop_duplicates(subset=['claimUniqueId'])

# Calculate Denied to Accepted Ratio
claim_denied_count = claim_df[claim_df['claim_FE_DenialStatus'] == 'Denied'].shape[0]
claim_accepted_count = claim_df[claim_df['claim_FE_DenialStatus'] == 'Accepted'].shape[0]
claim_ratio = claim_denied_count / claim_accepted_count if claim_accepted_count != 0 else 0

service_denied_count = claim_df[claim_df['FE_DenialStatus'] == 'Denied'].shape[0]
service_accepted_count = claim_df[claim_df['FE_DenialStatus'] == 'Accepted'].shape[0]
service_ratio = service_denied_count / service_accepted_count if service_accepted_count != 0 else 0

# Plotting
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Claim ID Level FE_DenialStatus
sns.countplot(x='claim_FE_DenialStatus', data=claim_df, ax=axes[0], order=['Accepted', 'Denied'], palette=['blue', 'orange'])
axes[0].set_title("Claim ID Level Denial Status")
axes[0].set_xlabel("Denial Status")
axes[0].set_ylabel("Count")
axes[0].yaxis.set_major_formatter(FuncFormatter(format_with_commas))
axes[0].text(0.95, 0.95, f'Ratio: {100*claim_ratio:.2f}%', transform=axes[0].transAxes, ha='right', va='top',
             fontsize=12, color='red', bbox=dict(facecolor='white', alpha=0.01))

# Service Line ID Level FE_DenialStatus
sns.countplot(x='FE_DenialStatus', data=claim_df, ax=axes[1], order=['Accepted', 'Denied'], palette=['blue', 'orange'])
axes[1].set_title("Service Line Level Denial Status")
axes[1].set_xlabel("Denial Status")
axes[1].set_ylabel("Count")
axes[1].yaxis.set_major_formatter(FuncFormatter(format_with_commas))
axes[1].text(0.95, 0.95, f'Ratio: {100*service_ratio:.2f}%', transform=axes[1].transAxes, ha='right', va='top',
             fontsize=12, color='red', bbox=dict(facecolor='white', alpha=0.01))

plt.tight_layout()
plt.show()
