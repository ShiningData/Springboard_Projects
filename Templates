import pandas as pd
import networkx as nx
from networkx.algorithms.community import greedy_modularity_communities
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

# Assuming 'df' is your DataFrame with columns 'RLTN_PWR_ID', 'TRAN_CD', 'VOLUME'
data_pivot = df.pivot_table(index='RLTN_PWR_ID', columns='TRAN_CD', values='VOLUME', fill_value=0)

# Standardizing the data
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_pivot)
data_corr = pd.DataFrame(data_scaled, columns=data_pivot.columns).corr()

# Create the graph
G = nx.Graph()

# Add nodes
for col in data_corr.columns:
    G.add_node(col)

# Add edges based on correlation threshold
threshold = 0.5
for i in range(len(data_corr)):
    for j in range(i + 1, len(data_corr)):
        if abs(data_corr.iloc[i, j]) > threshold:
            G.add_edge(data_corr.columns[i], data_corr.columns[j], weight=data_corr.iloc[i, j])

# Community Detection using modularity maximization
communities = list(greedy_modularity_communities(G, weight='weight'))
community_dict = {node: cid for cid, community in enumerate(communities) for node in community}

# Assigning colors for visualization based on community
colors = [community_dict[node] for node in G.nodes]

# Draw the graph
plt.figure(figsize=(12, 12))
pos = nx.spring_layout(G)  # positions for all nodes
nx.draw_networkx_nodes(G, pos, node_color=colors, node_size=700, cmap=plt.cm.jet)
nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=12, font_family="sans-serif")
plt.title('Network of TRAN_CD with Community Coloring')
plt.axis('off')  # Turn off the axis
plt.show()
