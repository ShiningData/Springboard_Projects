import pandas as pd
from collections import Counter

# Example data
data = {
    'ACCID': [1, 1, 2, 2, 1, 3],
    'TIMEKEY': ['2021-01-01', '2021-01-01', '2021-01-02', '2021-01-02', '2021-01-03', '2021-01-01'],
    'TRANCODE': ['T01', 'T02', 'T03', 'T04', 'T02', 'T05']
}
df = pd.DataFrame(data)

# Group by 'ACCID' and 'TIMEKEY', then aggregate 'TRANCODE' into lists
df_grouped = df.groupby(['ACCID', 'TIMEKEY'])['TRANCODE'].agg(list).reset_index()

# Define a function to count pairs
def count_pairs(tran_list):
    # Count occurrences of each possible pair
    count = Counter()
    for i in range(len(tran_list) - 1):
        # Consider the current and the next element as a pair
        pair = (tran_list[i], tran_list[i+1])
        count[pair] += 1
    return count

# Apply the function to each list in the DataFrame
df_grouped['PAIR_COUNT'] = df_grouped['TRANCODE'].apply(count_pairs)

# To create a matrix representation, we first extract all unique transcodes
all_transcodes = set()
df_grouped['TRANCODE'].apply(all_transcodes.update)
all_transcodes = sorted(all_transcodes)

# Initialize the matrix with zeros
matrix_df = pd.DataFrame(0, index=all_transcodes, columns=all_transcodes)

# Fill the matrix with pair counts
for index, row in df_grouped.iterrows():
    for pair, count in row['PAIR_COUNT'].items():
        matrix_df.at[pair[0], pair[1]] += count

# Displaying the matrix
print(matrix_df)
