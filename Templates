import pandas as pd

# Sample function placeholders for prediction (assuming these are defined in your model)
def predict_customer_resultcode(df_row):
    # Logic to predict customerResultcode based on the row data
    return "CRC1100"  # This is a placeholder

def predict_overall_match_score(df_row):
    # Logic to predict OverallMtchScore based on the row data
    return 85  # This is a placeholder


def test_feature_impact(df, feature_columns, missing_value='U'):
    results = []
    
    # Iterate over each feature to test the impact of changing its value
    for feature in feature_columns:
        for idx, row in df.iterrows():
            original_row = row.copy()

            # Change the feature value to 'U' or 'MISSING'
            modified_row = original_row.copy()
            modified_row[feature] = missing_value

            # Predict using the modified row
            modified_overall_match_score = predict_overall_match_score(modified_row)
            modified_customer_resultcode = predict_customer_resultcode(modified_row)

            # Save the results for analysis
            results.append({
                'Feature': feature,
                'OriginalOverallMtchScore': original_row['OverallMtchScore'],
                'ModifiedOverallMtchScore': modified_overall_match_score,
                'OriginalCustomerResultcode': original_row['customerResultcode'],
                'ModifiedCustomerResultcode': modified_customer_resultcode,
                'MissingValueUsed': missing_value,
            })
    
    # Convert results to DataFrame for better visualization
    result_df = pd.DataFrame(results)
    return result_df


# Assume this is the input DataFrame for testing (minimal example)
data = {
    'NameMtch': [100, 90],
    'BusNameMtch': [95, 85],
    'AddressMtch': [80, 70],
    'CityMtch': [100, 100],
    'StateMtch': [90, 85],
    'ZipMtch': [100, 100],
    'HmPhoneMtch': [100, 0],
    'WkPhoneMtch': [0, 100],
    'SSNMtch': [100, 100],
    'DOBMtch': [95, 80],
    'IDTypeMtch': [100, 90],
    'IDNoMtch': [100, 85],
    'IDStateMtch': [90, 85],
    'OverallMtchScore': [95, 85],
    'customerResultcode': ['CRC1100', 'CRC2100'],
}

# Create the DataFrame
df = pd.DataFrame(data)

# Define feature columns to test
feature_columns = ['NameMtch', 'BusNameMtch', 'AddressMtch', 'CityMtch', 'StateMtch', 'ZipMtch', 
                   'HmPhoneMtch', 'WkPhoneMtch', 'SSNMtch', 'DOBMtch', 'IDTypeMtch', 'IDNoMtch', 'IDStateMtch']

# Test impact for 'U' value
result_df_U = test_feature_impact(df, feature_columns, missing_value='U')

# Test impact for 'MISSING' value
result_df_missing = test_feature_impact(df, feature_columns, missing_value='MISSING')

# Display the results
import ace_tools as tools; tools.display_dataframe_to_user(name="Result with 'U' value", dataframe=result_df_U)
tools.display_dataframe_to_user(name="Result with 'MISSING' value", dataframe=result_df_missing)
