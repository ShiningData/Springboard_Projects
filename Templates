import pandas as pd
import plotly.graph_objs as go
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import ipywidgets as widgets
from IPython.display import display

# Sample data
wire_segment = pd.DataFrame({
    'segment': ['A', 'B', 'C', 'D'],
    'tran_direction': ['inbound', 'outbound', 'inbound', 'outbound'],
    'total_tran_count': [20, 15, 10, 5],
    'total_tran_amt': [2000, 1500, 1000, 500]
})

# Dropdown widget for transaction direction filtering
tran_direction_filter = widgets.Dropdown(
    options=['All'] + wire_segment['tran_direction'].unique().tolist(),
    value='All',
    description='Filter by transaction direction:'
)

# Display function for table
def display_table(tran_direction):
    filtered_data = wire_segment.copy()
    if tran_direction != 'All':
        filtered_data = filtered_data[filtered_data['tran_direction'] == tran_direction]
    filtered_data = filtered_data.sort_values(by='total_tran_amt', ascending=False)

    fig = go.Figure(
        data=[go.Table(
            header=dict(
                values=list(filtered_data.columns),
                fill_color='paleturquoise',
                align='left'
            ),
            cells=dict(
                values=[filtered_data[column] for column in filtered_data.columns],
                align='left'
            )
        )]
    )
    fig.update_layout(
        margin=dict(l=20, r=20, t=20, b=20),
        height=300
    )
    display(fig)

# Display widgets and table
display(tran_direction_filter)
widgets.interactive(display_table, tran_direction=tran_direction_filter)
