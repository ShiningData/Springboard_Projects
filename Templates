import numpy as np
import matplotlib.pyplot as plt

def plot_colored_confusion_matrix(y_true, y_pred, classes):
    """
    Display a confusion matrix with errors highlighted.

    :param y_true: List of true labels
    :param y_pred: List of predicted labels
    :param classes: List of class names
    :return: None
    """

    # Compute the confusion matrix
    confusion = np.zeros((len(classes), len(classes)), dtype=int)
    for true, pred in zip(y_true, y_pred):
        confusion[true][pred] += 1

    fig, ax = plt.subplots(figsize=(10, 10))
    
    # Plot the matrix
    for i in range(len(classes)):
        for j in range(len(classes)):
            if i == j:
                ax.text(j, i, confusion[i, j], ha='center', va='center', color='blue')
            else:
                ax.text(j, i, confusion[i, j], ha='center', va='center', color='red')

    # Set the ticks
    ax.set_xticks(np.arange(len(classes)))
    ax.set_yticks(np.arange(len(classes)))
    ax.set_xticklabels(classes)
    ax.set_yticklabels(classes)

    # Display
    ax.set_xlabel('Predicted')
    ax.set_ylabel('True')
    ax.set_title('Confusion Matrix with Errors Highlighted')
    plt.show()

# Example usage:
y_true = [0, 1, 2, 0, 2, 1, 1, 2]
y_pred = [0, 1, 0, 0, 2, 1, 0, 2]
classes = ['Class 0', 'Class 1', 'Class 2']

plot_colored_confusion_matrix(y_true, y_pred, classes)
