import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Parse claimCreationDate to year-month format
df['claimCreationDate'] = pd.to_datetime(df['claimCreationDate'])
df['year_month'] = df['claimCreationDate'].dt.to_period('M')

# Aggregate FE_DenialStatus at Claim ID Level
df['claim_FE_DenialStatus'] = df.groupby('claimUniqueId')['FE_DenialStatus'].transform(
    lambda x: 'Denied' if 'Denied' in x.values else 'Accepted'
)

# Drop duplicates to get Claim Level data
claim_df = df.drop_duplicates(subset=['claimUniqueId'])

# Set year_month as a categorical variable for ordered plotting
claim_df['year_month'] = pd.Categorical(
    claim_df['year_month'],
    categories=sorted(claim_df['year_month'].unique()),
    ordered=True
)

# Plotting
plt.figure(figsize=(14, 8))
ax = sns.countplot(x='year_month', hue='claim_FE_DenialStatus', data=claim_df, order=claim_df['year_month'].cat.categories, palette=['blue', 'orange'])

# Adjust y-axis limits to create space for text
ax.set_ylim(0, ax.get_ylim()[1] * 1.2)

# Add Denied to Accepted Ratio between the bars as percentages, in red color
for i, bar in enumerate(ax.patches):
    if i % 2 == 1:  # This condition points to the second (Denied) bar
        denied_bar = bar
        accepted_bar = ax.patches[i - 1]

        # Calculate the middle position between the two bars
        middle_x = (denied_bar.get_x() + accepted_bar.get_x() + denied_bar.get_width()) / 2

        # Determine the height for placing the text
        text_y = max(denied_bar.get_height(), accepted_bar.get_height()) * 1.05  # Slightly above the highest bar

        # Calculate the ratio
        ratio = (denied_bar.get_height() / accepted_bar.get_height()) * 100 if accepted_bar.get_height() != 0 else 0

        # Place the ratio text above the bars, centered
        ax.text(middle_x, text_y, f'{ratio:.1f}%', ha='center', fontsize=10, color='red')

plt.title('Distribution of Denial Status for Each Year-Month')
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_with_commas))
plt.legend(title='Denial Status')
plt.tight_layout()
plt.show()
