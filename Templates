from sklearn.cluster import AgglomerativeClustering
from fuzzywuzzy import fuzz
import numpy as np

# Sample data
bank_names = ['PNCBANK', 'PNC BANK NA', 'PNC', 'BANK OF AMERICA NA', 'BOFA', 'BANK OF AMERICA']

# Compute similarity matrix
def similarity_matrix(names):
    length = len(names)
    sim_matrix = np.zeros((length, length))
    for i in range(length):
        for j in range(length):
            sim_matrix[i, j] = fuzz.token_sort_ratio(names[i], names[j])
    # Normalize similarity values to [0, 1]
    return sim_matrix / 100

sim_matrix = similarity_matrix(bank_names)

# Perform clustering
clustering = AgglomerativeClustering(n_clusters=None, affinity='precomputed', linkage='average', distance_threshold=0.8)
clusters = clustering.fit_predict(1 - sim_matrix)  # 1 - sim_matrix because we need distance

# Map each name to its cluster
clustered_names = {}
for idx, cluster_id in enumerate(clusters):
    if cluster_id in clustered_names:
        clustered_names[cluster_id].append(bank_names[idx])
    else:
        clustered_names[cluster_id] = [bank_names[idx]]

# Choose a representative name for each cluster (e.g., the longest name)
canonical_names = [max(names, key=len) for names in clustered_names.values()]

print("Canonical Bank Names:", canonical_names)
