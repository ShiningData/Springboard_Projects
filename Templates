def convert_to_meaning(sentence):
    """
    Converts a condition-based sentence into a human-readable meaning.
    
    Parameters:
    sentence (str): A sentence containing a range or condition.

    Returns:
    str: A human-readable meaning of the sentence.
    """
    if "means" not in sentence:
        return "Invalid format"
    
    # Split sentence into parts
    variable_part, meaning_part = sentence.split("means", 1)
    variable_part = variable_part.strip()
    meaning_part = meaning_part.strip()
    
    # Extract the variable and condition
    if "(" in variable_part and ")" in variable_part:
        variable, condition = variable_part.split("(", 1)
        condition = condition.rstrip(")")
        variable = variable.strip()
        
        # Process different cases for conditions
        if "," in condition:
            # Handle range conditions
            low, high = condition.split(",")
            low = low.strip()
            high = high.strip()
            
            if low == "-inf":
                return f"{variable} is less than {high}"
            elif high == "inf":
                return f"{variable} is greater than {low}"
            else:
                return f"{variable} is between {low} and {high}"
        else:
            # Handle specific value conditions
            return f"{variable} is {condition}"
    else:
        # Handle categorical mappings
        return meaning_part

# Example Usage:
sentences = [
    "FE_claimstate_to_service_days = (<4.5, inf) means FE_claimstate_to_service_days is greater than 4.5",
    "FE_claimstate_to_service_days = (-inf, 281.5) means FE_claimstate_to_service_days is less than 281.5",
    "serviceLineChargeAmt = (<1.02, 15719.33) means serviceLineChargeAmt is between 1.02 and 15719.33",
    "FE_payerIDName = [99999-0122 - MEDICARE] means FE_payerIDName is 99999-0122 - MEDICARE",
    "serviceLineUnitOfMeasure = {UN} means serviceLineUnitOfMeasure is UN"
]

# Convert each sentence
for s in sentences:
    print(convert_to_meaning(s))
